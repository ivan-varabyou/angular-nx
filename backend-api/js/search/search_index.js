var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.672,1,1.672]],["body/controllers/AppController.html",[0,2.917,1,2.505,2,2.677,3,0.696,4,0.696,5,0.601,6,0.553,7,2.677,8,0.601,9,3.433,10,4.937,11,3.204,12,4.24,13,0.696,14,1.501,15,4.937,16,1.953,17,0.049,18,1.034,19,3.306,20,3.433,21,4.24,22,4.24,23,1.463,24,4.68,25,4.937,26,1.501,27,0.696,28,0.799,29,0.696,30,0.431,31,1.034,32,2.263,33,0.036,34,0.036]],["title/modules/AppModule.html",[35,1.002,36,1.672]],["body/modules/AppModule.html",[1,2.56,2,2.77,3,0.507,4,0.507,5,0.438,6,0.314,8,0.438,9,2.77,11,2.341,17,0.049,27,1.086,28,0.581,29,0.507,30,0.314,32,2.341,33,0.029,34,0.029,35,1.732,36,2.954,37,1.553,38,1.093,39,1.422,40,1.422,41,0.964,42,1.422,43,2.021,44,1.949,45,1.949,46,2.525,47,2.221,48,2.021,49,1.422,50,1.093,51,2.407,52,3.42,53,2.966,54,1.949,55,3.42,56,1.422,57,2.407,58,1.242,59,3.979,60,2.407,61,1.949,62,2.407,63,1.093,64,1.422,65,2.341,66,2.407,67,1.949,68,2.407,69,1.409,70,1.949,71,3.42,72,1.242,73,1.647,74,1.647,75,2.407,76,2.407,77,2.407,78,1.647,79,1.371,80,0.507,81,2.407,82,2.341,83,1.422,84,2.77,85,2.407,86,2.407,87,2.407,88,3.42,89,2.407,90,1.422,91,0.753,92,2.021,93,2.021,94,0.964,95,1.422]],["title/modules/AuthModule.html",[35,1.002,46,1.461]],["body/modules/AuthModule.html",[3,0.499,4,0.499,5,0.431,6,0.309,8,0.431,17,0.049,27,1.082,28,0.573,29,0.713,30,0.309,33,0.029,34,0.029,35,1.612,37,1.537,38,1.077,39,1.402,40,1.402,41,0.95,42,2.332,43,2.332,46,2.736,47,2.211,48,2,49,1.402,50,1.077,53,2.317,63,1.077,64,1.402,67,1.921,84,1.921,91,1.234,92,1.402,93,1.402,94,1.824,95,1.402,96,1.921,97,1.921,98,1.921,99,2.372,100,2.406,101,2.443,102,2.148,103,2.372,104,2.317,105,2.741,106,3.947,107,1.402,108,2.372,109,1.624,110,1.921,111,2.372,112,2.372,113,2,114,2.372,115,1.624,116,2.372,117,2.372,118,2,119,2.372,120,1.402,121,1.921,122,2.372,123,2.372,124,1.921,125,3.385,126,1.921,127,1.921,128,2.372,129,1.624,130,2.372,131,1.624,132,2.372,133,2.372,134,1.624,135,2.372]],["title/classes/AuthResolver.html",[30,0.369,113,1.672]],["body/classes/AuthResolver.html",[3,0.438,4,0.438,5,0.378,6,0.528,8,0.666,13,0.438,14,1.09,16,1.818,17,0.049,18,1.145,23,1.265,27,0.852,29,0.438,30,0.271,31,0.962,33,0.026,34,0.026,50,1.397,58,1.074,79,1.812,80,0.648,83,2.765,90,1.229,91,1.265,92,2.552,94,1.925,95,1.818,100,2.124,104,2.106,110,1.685,113,2.391,115,2.106,131,2.106,136,1.424,137,1.685,138,3.077,139,2.334,140,3.277,141,4.522,142,1.074,143,2.08,144,2.08,145,2.492,146,1.397,147,2.492,148,3.662,149,1.233,150,1.09,151,1.233,152,2.106,153,2.08,154,3.277,155,3.077,156,2.08,157,3.277,158,2.492,159,2.77,160,2.391,161,3.497,162,1.89,163,3.662,164,2.77,165,2.106,166,1.397,167,2.48,168,3.277,169,3.077,170,3.077,171,2.08,172,2.492,173,3.077,174,3.077,175,1.685,176,1.424,177,1.424,178,1.424,179,1.424,180,2.08,181,2.08,182,1.09,183,1.685,184,1.229,185,1.685,186,1.685,187,1.685,188,2.08,189,1.229,190,2.08]],["title/injectables/AuthService.html",[100,1.285,191,0.684]],["body/injectables/AuthService.html",[3,0.381,4,0.381,5,0.329,6,0.492,8,0.612,13,0.381,14,0.981,17,0.049,18,1.052,23,1.179,26,1.947,27,0.939,28,0.437,29,0.381,30,0.236,31,0.866,33,0.024,34,0.024,63,0.821,64,1.069,69,0.64,70,1.464,80,0.708,91,1.476,92,1.636,93,1.636,94,1.348,100,1.257,102,2.026,104,1.896,109,1.238,115,1.896,129,1.238,131,1.896,139,2.214,140,2.243,142,1.947,146,1.257,149,1.348,150,1.192,151,1.348,152,1.896,154,3.054,157,2.243,158,2.243,162,2.304,164,2.581,165,2.304,166,2.026,167,2.376,168,2.243,175,1.464,176,1.238,177,1.238,178,1.238,182,1.518,184,1.989,185,1.464,186,2.725,187,3.054,189,1.989,191,0.669,192,0.821,193,1.464,194,2.769,195,2.769,196,1.808,197,4.604,198,1.845,199,1.808,200,2.769,201,1.808,202,2.769,203,1.896,204,2.243,205,2.769,206,3.771,207,1.808,208,2.243,209,2.243,210,2.769,211,2.581,212,3.365,213,3.054,214,2.769,215,2.769,216,1.808,217,1.808,218,2.304,219,2.228,220,1.808,221,2.769,222,1.808,223,2.769,224,1.238,225,1.808,226,1.808,227,1.808,228,1.808,229,1.808,230,1.464,231,2.769,232,1.808,233,1.808,234,1.808,235,1.238]],["title/injectables/GqlAuthGuard.html",[191,0.684,236,1.672]],["body/injectables/GqlAuthGuard.html",[3,0.628,4,0.628,5,0.543,6,0.517,8,0.721,13,0.628,14,1.404,17,0.049,18,0.933,20,3.843,23,1.24,27,0.938,28,0.721,29,0.628,30,0.389,31,0.933,33,0.034,34,0.034,58,1.541,79,1.902,80,0.628,82,3.477,94,1.589,107,1.764,149,1.196,150,1.057,151,1.196,159,2.714,182,1.057,191,0.958,192,1.355,219,1.764,236,2.343,237,3.211,238,2.417,239,3.211,240,3.211,241,3.966,242,3.966,243,3.966,244,3.843,245,2.984,246,3.966,247,3.966,248,3.211,249,3.211,250,3.966,251,3.211,252,2.984,253,2.984,254,2.417,255,2.984,256,2.984]],["title/injectables/JwtStrategy.html",[101,1.461,191,0.684]],["body/injectables/JwtStrategy.html",[3,0.503,4,0.503,5,0.434,6,0.517,8,0.619,13,0.503,14,1.205,17,0.048,18,1.064,23,1.35,27,0.909,28,0.577,29,0.503,30,0.312,31,0.747,33,0.029,34,0.029,35,1.529,63,1.085,64,1.412,80,0.503,91,1.35,94,1.73,101,2.229,107,1.412,118,3.079,121,3.953,124,1.935,139,2.046,142,2.356,145,2.755,146,1.545,147,2.755,149,0.957,150,0.846,151,0.957,159,2.329,160,2.011,165,3.415,166,1.085,182,0.846,191,0.822,192,1.085,208,2.755,213,3.497,224,1.635,230,1.935,240,2.755,257,1.935,258,2.755,259,2.329,260,3.402,261,3.402,262,2.956,263,3.696,264,3.402,265,3.402,266,2.389,267,3.402,268,3.402,269,2.755,270,3.402,271,2.389,272,3.497,273,3.402,274,1.935,275,3.402,276,2.389,277,2.389,278,2.389,279,2.389,280,2.389,281,2.389,282,2.389,283,2.389,284,2.389]],["title/injectables/PasswordService.html",[102,1.285,191,0.684]],["body/injectables/PasswordService.html",[3,0.512,4,0.512,5,0.442,6,0.567,8,0.727,13,0.512,14,1.541,17,0.049,18,1.251,23,1.361,26,2.314,27,0.725,28,0.587,29,0.512,30,0.317,31,1.361,33,0.029,34,0.029,80,0.842,102,1.564,120,1.436,134,2.358,149,1.38,150,1.22,151,1.38,162,2.825,167,2.246,172,2.789,182,1.417,191,0.832,192,1.103,218,2.738,285,1.968,286,3.239,287,4.594,288,2.035,289,4,290,3.444,291,3.444,292,3.444,293,4.594,294,2.431,295,4.771,296,5.098,297,3.444,298,2.431,299,1.664,300,1.968,301,3.444,302,2.431,303,3.444,304,3.444,305,3.444,306,3.444,307,2.431,308,2.431,309,2.431]],["title/entities/UserEntity.html",[69,1.002,310,1.672]],["body/entities/UserEntity.html",[3,0.473,4,0.473,5,0.409,6,0.625,8,0.409,13,0.473,16,2.746,17,0.049,18,1.453,26,2.307,27,0.685,29,0.473,30,0.293,33,0.028,34,0.028,69,1.153,72,1.16,78,1.538,80,0.978,90,1.924,91,1.589,120,2.481,127,2.637,162,2.3,166,2.023,176,1.538,177,1.538,178,1.538,209,3.4,235,2.621,288,1.924,299,2.229,310,2.263,311,1.82,312,3.256,313,3.609,314,4.456,315,4.456,316,3.256,317,4.198,318,4.198,319,2.247,320,4.198,321,4.456,322,2.247,323,3.256,324,3.829,325,2.247,326,3.256,327,3.256,328,3.256,329,2.247,330,3.256,331,3.256,332,2.247,333,3.256,334,3.256,335,3.256,336,4.198,337,2.247,338,2.247,339,2.247,340,3.256,341,2.247,342,1.538,343,2.247]],["title/classes/UserResolver.html",[30,0.369,344,1.672]],["body/classes/UserResolver.html",[3,0.531,4,0.531,5,0.459,6,0.532,8,0.643,13,0.531,14,1.253,16,1.492,17,0.049,18,1.106,23,1.106,27,1.017,28,0.61,29,0.531,30,0.329,31,0.789,33,0.03,34,0.03,58,1.303,69,1.71,79,1.417,80,0.745,83,2.413,91,1.647,94,1.417,136,1.728,139,2.108,142,2.108,149,1.417,150,1.253,151,1.417,161,3.307,167,1.826,182,1.253,183,2.044,184,1.492,189,1.492,198,1.987,236,2.413,239,2.044,258,2.864,272,2.864,310,2.09,344,2.09,345,2.044,346,3.537,347,2.524,348,2.524,349,2.524,350,2.524,351,2.524,352,3.537,353,3.537,354,4.829,355,3.537,356,2.864,357,2.864,358,3.537,359,1.728,360,2.524,361,1.728,362,2.044,363,2.524,364,2.524,365,2.524,366,2.524,367,2.524,368,2.524,369,2.524]],["title/injectables/UserService.html",[191,0.684,198,1.134]],["body/injectables/UserService.html",[3,0.4,4,0.4,5,0.345,6,0.57,8,0.703,13,0.4,14,1.018,17,0.049,18,1.299,23,1.462,26,1.575,27,0.814,28,0.459,29,0.4,30,0.248,31,1.209,33,0.025,34,0.025,56,1.122,69,1.695,72,0.98,73,2.647,80,0.814,91,1.571,139,2.594,142,1.996,146,1.305,149,1.55,150,1.37,151,1.55,152,1.968,166,2.061,167,2.413,182,1.37,184,1.122,189,2.285,191,0.694,192,0.862,198,1.152,203,1.968,211,2.992,218,1.3,219,1.699,235,3.107,299,2.374,313,2.328,342,2.844,361,1.3,370,1.538,371,2.875,372,2.875,373,3.868,374,2.875,375,2.875,376,1.899,377,3.868,378,1.899,379,3.468,380,2.875,381,3.468,382,1.899,383,2.875,384,2.875,385,2.875,386,1.899,387,2.875,388,2.875,389,2.875,390,2.875,391,1.899,392,3.868,393,3.868,394,3.868,395,2.875,396,1.899,397,1.899,398,1.899,399,1.899,400,1.899,401,1.899,402,1.538,403,1.899,404,1.899,405,1.899,406,1.899,407,1.899]],["title/modules/UsersModule.html",[35,1.002,47,1.285]],["body/modules/UsersModule.html",[3,0.621,4,0.621,5,0.536,6,0.384,8,0.536,17,0.048,27,1.065,28,0.712,29,0.828,30,0.384,33,0.034,34,0.034,35,1.83,37,1.786,38,1.339,39,1.742,40,1.742,41,1.182,42,2.791,43,2.616,47,2.346,48,2.325,49,1.742,50,1.339,53,2.018,54,2.388,56,1.742,69,1.393,72,1.522,105,3.186,134,2.018,160,1.742,198,2.209,342,3.233,344,2.616,361,2.018,362,2.388,408,2.388,409,2.388,410,2.388,411,2.949,412,3.934,413,2.949,414,2.949,415,2.949,416,2.949,417,2.949]],["title/coverage.html",[418,3.099]],["body/coverage.html",[0,1.758,1,1.758,5,0.541,6,0.72,7,2.409,17,0.048,30,0.516,33,0.034,34,0.034,41,1.192,63,1.351,65,2.037,69,1.054,80,0.626,100,1.351,101,1.536,102,1.351,113,1.758,137,2.409,146,1.351,179,2.037,191,1.192,193,2.409,198,1.192,236,1.758,237,2.409,238,2.409,257,2.409,285,2.409,310,1.758,311,2.409,344,1.758,345,2.409,359,2.037,370,2.409,418,2.409,419,2.037,420,2.975,421,2.975,422,2.409,423,4.74,424,5.52,425,5.075,426,3.958,427,2.409,428,2.409,429,4.447,430,3.958,431,2.409,432,2.975,433,2.409,434,2.409,435,2.975,436,2.975]],["title/dependencies.html",[38,1.541,437,1.928]],["body/dependencies.html",[17,0.049,28,0.659,33,0.032,34,0.032,38,1.238,41,1.093,56,1.612,58,1.408,61,2.209,72,1.408,79,1.705,80,0.574,107,1.612,109,1.867,118,1.612,259,1.867,263,3.022,286,2.209,438,2.727,439,5.291,440,2.727,441,3.732,442,2.727,443,2.727,444,2.727,445,2.727,446,2.727,447,4.254,448,3.022,449,2.727,450,2.727,451,2.727,452,2.727,453,2.727,454,2.727,455,2.727,456,4.575,457,2.727,458,2.727,459,2.727,460,2.727,461,2.727,462,3.022,463,2.727,464,4.575,465,2.727,466,2.727,467,2.727,468,2.727,469,2.727,470,2.727,471,2.727,472,2.727,473,2.727,474,2.727,475,2.727,476,2.727,477,2.727,478,2.727,479,2.727,480,2.727,481,2.727,482,2.727,483,2.727,484,2.727,485,2.727,486,2.727,487,2.727,488,2.727,489,2.727,490,2.727,491,2.727,492,2.727,493,2.727,494,2.727,495,2.727]],["title/miscellaneous/functions.html",[496,1.407,497,2.749]],["body/miscellaneous/functions.html",[6,0.542,13,0.876,17,0.042,33,0.042,34,0.042,41,2.142,204,3.369,262,2.847,433,3.369,434,3.369,496,2.458,497,3.369,498,4.16,499,4.16]],["title/index.html",[13,0.501,500,1.928,501,1.928]],["body/index.html",[11,2.896,17,0.042,32,2.896,33,0.042,34,0.042,79,1.696,160,2.501,262,2.896,419,2.896,502,4.232,503,4.232,504,4.232,505,4.232]],["title/license.html",[500,1.928,501,1.928,506,1.63]],["body/license.html",[17,0.035,33,0.035,34,0.035,50,1.42,74,2.14,95,2.417,356,2.532,419,2.14,462,2.532,506,2.14,507,2.532,508,4.557,509,3.127,510,3.127,511,4.089,512,3.127,513,3.127,514,3.127,515,3.127,516,3.127,517,3.127,518,4.089,519,5.377,520,3.127,521,3.127,522,3.127,523,4.557,524,3.127,525,4.089,526,3.127,527,3.127,528,3.127,529,3.127,530,3.127,531,3.127,532,3.127,533,3.127,534,3.127,535,4.089,536,3.127,537,3.127,538,3.127,539,3.127,540,3.127,541,3.127,542,3.127,543,4.089,544,4.089,545,3.127,546,3.127,547,3.127,548,3.127,549,3.127,550,3.127,551,3.127,552,3.127,553,3.127,554,3.127,555,3.127,556,3.127,557,3.127,558,3.127,559,3.127,560,3.127,561,3.127,562,3.127,563,3.127,564,3.127,565,3.127,566,3.127,567,3.127,568,3.127,569,3.127,570,3.127,571,3.127,572,3.127]],["title/modules.html",[37,1.738]],["body/modules.html",[17,0.042,33,0.042,34,0.042,36,2.438,37,1.873,46,2.129,47,1.873,448,4.182,573,5.164,574,5.164,575,5.164]],["title/overview.html",[576,3.099]],["body/overview.html",[0,1.896,17,0.047,33,0.036,34,0.036,35,1.136,36,3.062,37,1.457,38,1.457,39,1.896,40,1.896,41,1.286,42,1.896,43,1.896,44,2.598,45,2.598,46,2.85,47,2.395,48,2.457,49,1.896,50,1.457,78,2.196,96,2.598,97,2.598,98,2.598,100,2.395,101,2.382,102,2.095,136,2.196,192,1.457,198,2.113,402,3.368,408,2.598,409,2.598,410,2.598,576,2.598,577,3.209,578,3.209,579,3.209]],["title/properties.html",[288,2.006,437,1.928]],["body/properties.html",[17,0.046,33,0.043,34,0.043,288,2.533,506,2.934,507,3.472,580,4.287,581,4.287]],["title/miscellaneous/variables.html",[496,1.407,582,2.749]],["body/miscellaneous/variables.html",[6,0.524,8,0.373,13,0.432,17,0.049,23,1.135,26,2.171,31,1.406,33,0.026,34,0.026,63,1.648,65,2.084,73,1.403,74,1.403,79,1.22,80,0.846,82,1.403,83,1.211,90,1.211,91,0.641,93,1.211,118,1.211,120,2.374,126,1.66,129,1.403,146,1.648,150,0.726,162,1.874,164,1.403,166,1.648,179,2.084,182,1.286,203,1.403,211,2.084,219,1.211,224,2.485,244,2.94,248,1.66,249,1.66,251,3.771,254,2.94,259,1.403,269,1.66,274,2.465,300,4.308,357,2.465,359,2.084,422,1.66,427,1.66,428,1.66,431,1.66,496,1.211,582,1.66,583,2.05,584,2.05,585,2.05,586,2.05,587,2.05,588,4.018,589,2.05,590,2.05,591,2.05,592,2.05,593,2.05,594,2.05,595,2.05,596,2.05,597,2.05,598,2.05,599,2.05,600,2.05,601,2.05,602,2.05,603,2.05,604,2.05,605,2.05,606,2.05,607,2.05,608,5.107,609,2.05,610,3.044,611,2.05,612,2.05,613,2.05,614,3.044,615,2.05,616,2.05,617,2.05,618,2.05,619,2.05,620,3.044,621,3.044,622,3.044,623,3.044,624,2.05,625,2.05,626,3.044,627,3.044,628,3.044,629,2.05,630,2.05,631,2.05,632,2.05,633,2.05,634,2.05,635,2.05,636,2.05,637,2.05,638,2.05,639,2.05,640,2.05,641,2.05,642,2.05,643,2.05,644,2.05,645,2.05,646,2.05,647,2.05]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0.1.0",{"_index":581,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":488,"title":{},"body":{"dependencies.html":{}}}],["0.14.3",{"_index":495,"title":{},"body":{"dependencies.html":{}}}],["0.3.2",{"_index":481,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":493,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":482,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":402,"title":{},"body":{"injectables/UserService.html":{},"overview.html":{}}}],["1.6.0",{"_index":474,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":425,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":301,"title":{},"body":{"injectables/PasswordService.html":{}}}],["10.0.2",{"_index":456,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":460,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":459,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":424,"title":{},"body":{"coverage.html":{}}}],["12.1.0",{"_index":455,"title":{},"body":{"dependencies.html":{}}}],["12.1.1",{"_index":458,"title":{},"body":{"dependencies.html":{}}}],["16.9.0",{"_index":478,"title":{},"body":{"dependencies.html":{}}}],["18.0.0",{"_index":439,"title":{},"body":{"dependencies.html":{}}}],["18.0.1",{"_index":464,"title":{},"body":{"dependencies.html":{}}}],["18.0.5",{"_index":441,"title":{},"body":{"dependencies.html":{}}}],["19.3.2",{"_index":470,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":579,"title":{},"body":{"overview.html":{}}}],["2.11.8",{"_index":472,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":492,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":426,"title":{},"body":{"coverage.html":{}}}],["2024",{"_index":510,"title":{},"body":{"license.html":{}}}],["3",{"_index":577,"title":{},"body":{"overview.html":{}}}],["3/3",{"_index":430,"title":{},"body":{"coverage.html":{}}}],["4.0.1",{"_index":483,"title":{},"body":{"dependencies.html":{}}}],["4.10.4",{"_index":454,"title":{},"body":{"dependencies.html":{}}}],["4.18.2",{"_index":477,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":429,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":578,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":475,"title":{},"body":{"dependencies.html":{}}}],["5.3.2",{"_index":476,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":335,"title":{},"body":{"entities/UserEntity.html":{}}}],["6/6",{"_index":432,"title":{},"body":{"coverage.html":{}}}],["7.8.0",{"_index":490,"title":{},"body":{"dependencies.html":{}}}],["8.12.0",{"_index":485,"title":{},"body":{"dependencies.html":{}}}],["8601",{"_index":613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9.0.1",{"_index":480,"title":{},"body":{"dependencies.html":{}}}],["above",{"_index":542,"title":{},"body":{"license.html":{}}}],["access",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["access/interfaces",{"_index":178,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"entities/UserEntity.html":{}}}],["accesstoken",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":567,"title":{},"body":{"license.html":{}}}],["address",{"_index":323,"title":{},"body":{"entities/UserEntity.html":{}}}],["always",{"_index":634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["and/or",{"_index":533,"title":{},"body":{"license.html":{}}}],["angular",{"_index":176,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"entities/UserEntity.html":{}}}],["angular/animations",{"_index":438,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":440,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":442,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":443,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":444,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":445,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":446,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":447,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":451,"title":{},"body":{"dependencies.html":{}}}],["angular/ssr",{"_index":452,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"index.html":{}}}],["api/environments/environment.ts",{"_index":422,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["api/src/app/app.controller.ts",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["api/src/app/app.controller.ts:15",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["api/src/app/app.module.ts",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["api/src/app/app.resolver.ts",{"_index":427,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["api/src/app/auth/auth.module.ts",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{}}}],["api/src/app/auth/decorators/auth.decorator.ts",{"_index":428,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["api/src/app/auth/resolvers/auth.resolver.ts",{"_index":137,"title":{},"body":{"classes/AuthResolver.html":{},"coverage.html":{}}}],["api/src/app/auth/resolvers/auth.resolver.ts:13",{"_index":144,"title":{},"body":{"classes/AuthResolver.html":{}}}],["api/src/app/auth/resolvers/auth.resolver.ts:31",{"_index":156,"title":{},"body":{"classes/AuthResolver.html":{}}}],["api/src/app/auth/resolvers/auth.resolver.ts:41",{"_index":171,"title":{},"body":{"classes/AuthResolver.html":{}}}],["api/src/app/auth/services/auth.service.ts",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["api/src/app/auth/services/auth.service.ts:16",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["api/src/app/auth/services/auth.service.ts:37",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["api/src/app/auth/services/auth.service.ts:55",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["api/src/app/auth/services/jwt.strategy.ts",{"_index":257,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["api/src/app/auth/services/jwt.strategy.ts:12",{"_index":266,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["api/src/app/auth/services/jwt.strategy.ts:31",{"_index":271,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["api/src/app/auth/services/password.service.ts",{"_index":285,"title":{},"body":{"injectables/PasswordService.html":{},"coverage.html":{}}}],["api/src/app/auth/services/password.service.ts:13",{"_index":302,"title":{},"body":{"injectables/PasswordService.html":{}}}],["api/src/app/auth/services/password.service.ts:20",{"_index":298,"title":{},"body":{"injectables/PasswordService.html":{}}}],["api/src/app/auth/services/password.service.ts:30",{"_index":294,"title":{},"body":{"injectables/PasswordService.html":{}}}],["api/src/app/users/decorators/user.decorator.ts",{"_index":431,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["api/src/app/users/entities/user.entity.ts",{"_index":311,"title":{},"body":{"entities/UserEntity.html":{},"coverage.html":{}}}],["api/src/app/users/entities/user.entity.ts:19",{"_index":325,"title":{},"body":{"entities/UserEntity.html":{}}}],["api/src/app/users/entities/user.entity.ts:25",{"_index":337,"title":{},"body":{"entities/UserEntity.html":{}}}],["api/src/app/users/entities/user.entity.ts:31",{"_index":319,"title":{},"body":{"entities/UserEntity.html":{}}}],["api/src/app/users/entities/user.entity.ts:37",{"_index":332,"title":{},"body":{"entities/UserEntity.html":{}}}],["api/src/app/users/entities/user.entity.ts:43",{"_index":322,"title":{},"body":{"entities/UserEntity.html":{}}}],["api/src/app/users/entities/user.entity.ts:49",{"_index":329,"title":{},"body":{"entities/UserEntity.html":{}}}],["api/src/app/users/guards/gql.auth",{"_index":237,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"coverage.html":{}}}],["api/src/app/users/resolvers/user.resolver.ts",{"_index":345,"title":{},"body":{"classes/UserResolver.html":{},"coverage.html":{}}}],["api/src/app/users/resolvers/user.resolver.ts:12",{"_index":348,"title":{},"body":{"classes/UserResolver.html":{}}}],["api/src/app/users/resolvers/user.resolver.ts:28",{"_index":351,"title":{},"body":{"classes/UserResolver.html":{}}}],["api/src/app/users/services/user.service.ts",{"_index":370,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["api/src/app/users/services/user.service.ts:10",{"_index":378,"title":{},"body":{"injectables/UserService.html":{}}}],["api/src/app/users/services/user.service.ts:25",{"_index":386,"title":{},"body":{"injectables/UserService.html":{}}}],["api/src/app/users/services/user.service.ts:34",{"_index":396,"title":{},"body":{"injectables/UserService.html":{}}}],["api/src/app/users/services/user.service.ts:44",{"_index":382,"title":{},"body":{"injectables/UserService.html":{}}}],["api/src/app/users/services/user.service.ts:54",{"_index":391,"title":{},"body":{"injectables/UserService.html":{}}}],["api/src/app/users/users.module.ts",{"_index":411,"title":{},"body":{"modules/UsersModule.html":{}}}],["api/src/main.ts",{"_index":433,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["apollo/server",{"_index":453,"title":{},"body":{"dependencies.html":{}}}],["apollodriver",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["apollodriverconfig",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["app.controller",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["app.resolver",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/functions.html":{}}}],["appmodule",{"_index":36,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps/.../app.resolver.ts",{"_index":585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.decorator.ts",{"_index":586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.ts",{"_index":584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../main.ts",{"_index":498,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apps/.../user.decorator.ts",{"_index":583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/backend",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["args",{"_index":639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["args.password",{"_index":644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["args.username",{"_index":643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["argument",{"_index":647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arising",{"_index":571,"title":{},"body":{"license.html":{}}}],["array",{"_index":388,"title":{},"body":{"injectables/UserService.html":{}}}],["associated",{"_index":520,"title":{},"body":{"license.html":{}}}],["ast",{"_index":628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ast.kind",{"_index":631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["async",{"_index":139,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["auth/auth.module",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["authenticated",{"_index":354,"title":{},"body":{"classes/UserResolver.html":{}}}],["authentication",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/UserResolver.html":{}}}],["authguard",{"_index":252,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["authguard('jwt",{"_index":241,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["authmodule",{"_index":46,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authors",{"_index":560,"title":{},"body":{"license.html":{}}}],["authresolver",{"_index":113,"title":{"classes/AuthResolver.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"coverage.html":{}}}],["authservice",{"_index":100,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authsigninpayload",{"_index":163,"title":{},"body":{"classes/AuthResolver.html":{}}}],["auto",{"_index":326,"title":{},"body":{"entities/UserEntity.html":{}}}],["await",{"_index":189,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["axios",{"_index":473,"title":{},"body":{"dependencies.html":{}}}],["backend",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"index.html":{}}}],["base",{"_index":247,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["bcrypt",{"_index":286,"title":{},"body":{"injectables/PasswordService.html":{},"dependencies.html":{}}}],["boolean",{"_index":172,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/PasswordService.html":{}}}],["bootstrap",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":575,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":448,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["c",{"_index":509,"title":{},"body":{"license.html":{}}}],["called",{"_index":273,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["charge",{"_index":515,"title":{},"body":{"license.html":{}}}],["claim",{"_index":563,"title":{},"body":{"license.html":{}}}],["class",{"_index":30,"title":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["classes",{"_index":136,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{},"overview.html":{}}}],["client",{"_index":620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":97,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":408,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":409,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":410,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":321,"title":{},"body":{"entities/UserEntity.html":{}}}],["column({length",{"_index":334,"title":{},"body":{"entities/UserEntity.html":{}}}],["compare",{"_index":287,"title":{},"body":{"injectables/PasswordService.html":{}}}],["compare(password",{"_index":309,"title":{},"body":{"injectables/PasswordService.html":{}}}],["comparehash",{"_index":290,"title":{},"body":{"injectables/PasswordService.html":{}}}],["comparehash(password",{"_index":292,"title":{},"body":{"injectables/PasswordService.html":{}}}],["conditions",{"_index":541,"title":{},"body":{"license.html":{}}}],["configuration",{"_index":269,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["configure",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{}}}],["configures",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["connection",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["console",{"_index":607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(ctx.getargs",{"_index":641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["const",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":142,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":143,"title":{},"body":{"classes/AuthResolver.html":{}}}],["constructor(passwordservice",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(private",{"_index":183,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["constructor(userrepository",{"_index":376,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":347,"title":{},"body":{"classes/UserResolver.html":{}}}],["constructs",{"_index":145,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/JwtStrategy.html":{}}}],["contain",{"_index":412,"title":{},"body":{"modules/UsersModule.html":{}}}],["containing",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["context",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["contract",{"_index":568,"title":{},"body":{"license.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{},"overview.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["copies",{"_index":535,"title":{},"body":{"license.html":{}}}],["copy",{"_index":518,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":508,"title":{},"body":{"license.html":{}}}],["corresponding",{"_index":358,"title":{},"body":{"classes/UserResolver.html":{}}}],["coverage",{"_index":418,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":384,"title":{},"body":{"injectables/UserService.html":{}}}],["created",{"_index":313,"title":{},"body":{"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["createdatecolumn",{"_index":338,"title":{},"body":{"entities/UserEntity.html":{}}}],["createdatecolumn({type",{"_index":316,"title":{},"body":{"entities/UserEntity.html":{}}}],["createparamdecorator",{"_index":587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createparamdecorator((data",{"_index":638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":383,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser",{"_index":372,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(user",{"_index":380,"title":{},"body":{"injectables/UserService.html":{}}}],["credentials",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["ctx",{"_index":254,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["ctx.getargs",{"_index":642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.getargs()[1",{"_index":640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.getcontext().req",{"_index":256,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["current",{"_index":589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current_timestamp",{"_index":318,"title":{},"body":{"entities/UserEntity.html":{}}}],["currently",{"_index":353,"title":{},"body":{"classes/UserResolver.html":{}}}],["currentuser",{"_index":359,"title":{},"body":{"classes/UserResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["damages",{"_index":564,"title":{},"body":{"license.html":{}}}],["data",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(ast.value",{"_index":633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(environment.jwt.expiresin).getdate",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["date(value",{"_index":625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date|null",{"_index":629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db",{"_index":606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deal",{"_index":522,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":572,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorator",{"_index":357,"title":{},"body":{"classes/UserResolver.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{}}}],["decorators/auth.decorator",{"_index":180,"title":{},"body":{"classes/AuthResolver.html":{}}}],["decorators/user.decorator",{"_index":360,"title":{},"body":{"classes/UserResolver.html":{}}}],["default",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":38,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["distribute",{"_index":531,"title":{},"body":{"license.html":{}}}],["docker",{"_index":504,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":419,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["driver",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["dropschema",{"_index":602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dynamic",{"_index":449,"title":{},"body":{"dependencies.html":{}}}],["email",{"_index":314,"title":{},"body":{"entities/UserEntity.html":{}}}],["endpoint",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["entities",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"entities/UserEntity.html":{},"overview.html":{}}}],["entities/user.entity",{"_index":361,"title":{},"body":{"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["entity",{"_index":310,"title":{"entities/UserEntity.html":{}},"body":{"entities/UserEntity.html":{},"classes/UserResolver.html":{},"coverage.html":{}}}],["entity({name",{"_index":341,"title":{},"body":{"entities/UserEntity.html":{}}}],["environment",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environment.connection",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["environment.jwt.expiresin",{"_index":130,"title":{},"body":{"modules/AuthModule.html":{}}}],["environment.jwt.secret",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["environments/environment",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["event",{"_index":559,"title":{},"body":{"license.html":{}}}],["execution",{"_index":249,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["executioncontext",{"_index":244,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["expiration",{"_index":132,"title":{},"body":{"modules/AuthModule.html":{}}}],["expiresin",{"_index":129,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":462,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":240,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extract",{"_index":248,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["extracted",{"_index":275,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":277,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":280,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extracts",{"_index":645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fails",{"_index":187,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["false",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["feature",{"_index":415,"title":{},"body":{"modules/UsersModule.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["files",{"_index":521,"title":{},"body":{"license.html":{}}}],["find",{"_index":373,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid",{"_index":374,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":390,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyusername",{"_index":375,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyusername(username",{"_index":395,"title":{},"body":{"injectables/UserService.html":{}}}],["finds",{"_index":392,"title":{},"body":{"injectables/UserService.html":{}}}],["fitness",{"_index":554,"title":{},"body":{"license.html":{}}}],["following",{"_index":540,"title":{},"body":{"license.html":{}}}],["format",{"_index":614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["found",{"_index":394,"title":{},"body":{"injectables/UserService.html":{}}}],["free",{"_index":514,"title":{},"body":{"license.html":{}}}],["function",{"_index":434,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["functionality",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":497,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":538,"title":{},"body":{"license.html":{}}}],["generated",{"_index":327,"title":{},"body":{"entities/UserEntity.html":{}}}],["generates",{"_index":158,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["getdata",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["gethash",{"_index":291,"title":{},"body":{"injectables/PasswordService.html":{}}}],["gethash(password",{"_index":297,"title":{},"body":{"injectables/PasswordService.html":{}}}],["getrequest",{"_index":242,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["getrequest(context",{"_index":243,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["getting",{"_index":500,"title":{"index.html":{},"license.html":{}},"body":{}}],["gqlauthguard",{"_index":236,"title":{"injectables/GqlAuthGuard.html":{}},"body":{"injectables/GqlAuthGuard.html":{},"classes/UserResolver.html":{},"coverage.html":{}}}],["gqlexecutioncontext",{"_index":253,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["gqlexecutioncontext.create(context",{"_index":255,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["granted",{"_index":513,"title":{},"body":{"license.html":{}}}],["graphql",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"injectables/GqlAuthGuard.html":{},"classes/UserResolver.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["graphqljson",{"_index":635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["graphqlmodule",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlscalartype",{"_index":609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guard",{"_index":239,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"classes/UserResolver.html":{}}}],["guard.ts",{"_index":238,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"coverage.html":{}}}],["guard.ts:15",{"_index":245,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["guards/gql.auth",{"_index":364,"title":{},"body":{"classes/UserResolver.html":{}}}],["handle",{"_index":264,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["handler",{"_index":21,"title":{},"body":{"controllers/AppController.html":{}}}],["handling",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["hash",{"_index":296,"title":{},"body":{"injectables/PasswordService.html":{}}}],["hash(password",{"_index":307,"title":{},"body":{"injectables/PasswordService.html":{}}}],["hashed",{"_index":330,"title":{},"body":{"entities/UserEntity.html":{}}}],["hereby",{"_index":512,"title":{},"body":{"license.html":{}}}],["holders",{"_index":561,"title":{},"body":{"license.html":{}}}],["host",{"_index":595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":250,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["https://github.com/kelektiv/node.bcrypt.js#readme",{"_index":306,"title":{},"body":{"injectables/PasswordService.html":{}}}],["id",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":420,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":281,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":343,"title":{},"body":{"entities/UserEntity.html":{}}}],["implied",{"_index":550,"title":{},"body":{"license.html":{}}}],["import",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["included",{"_index":545,"title":{},"body":{"license.html":{}}}],["including",{"_index":525,"title":{},"body":{"license.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":173,"title":{},"body":{"classes/AuthResolver.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["information",{"_index":272,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/UserResolver.html":{}}}],["infringement",{"_index":558,"title":{},"body":{"license.html":{}}}],["injectable",{"_index":191,"title":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":397,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(userentity",{"_index":398,"title":{},"body":{"injectables/UserService.html":{}}}],["instance",{"_index":147,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/JwtStrategy.html":{}}}],["isignauthpayload",{"_index":154,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["isignauthresponse",{"_index":175,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["iso",{"_index":612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isvalid",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["iuser",{"_index":340,"title":{},"body":{"entities/UserEntity.html":{}}}],["json",{"_index":259,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":279,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":101,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{},"entities/UserEntity.html":{}}}],["kind",{"_index":549,"title":{},"body":{"license.html":{}}}],["kind.string",{"_index":632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["language",{"_index":626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":333,"title":{},"body":{"entities/UserEntity.html":{}}}],["legend",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["liability",{"_index":565,"title":{},"body":{"license.html":{}}}],["liable",{"_index":562,"title":{},"body":{"license.html":{}}}],["license",{"_index":506,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["limitation",{"_index":526,"title":{},"body":{"license.html":{}}}],["limited",{"_index":551,"title":{},"body":{"license.html":{}}}],["literal",{"_index":627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log",{"_index":605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logging",{"_index":604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logic",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["login",{"_index":140,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["login(@signin",{"_index":188,"title":{},"body":{"classes/AuthResolver.html":{}}}],["login(authsigninpayload",{"_index":153,"title":{},"body":{"classes/AuthResolver.html":{}}}],["login(signinpayload",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["logout",{"_index":141,"title":{},"body":{"classes/AuthResolver.html":{}}}],["logs",{"_index":157,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["main",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["managing",{"_index":371,"title":{},"body":{"injectables/UserService.html":{}}}],["map",{"_index":636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matching",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":553,"title":{},"body":{"license.html":{}}}],["merge",{"_index":529,"title":{},"body":{"license.html":{}}}],["message",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["metadata",{"_index":487,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":159,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["methods",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":496,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":507,"title":{},"body":{"license.html":{},"properties.html":{}}}],["modify",{"_index":528,"title":{},"body":{"license.html":{}}}],["module",{"_index":35,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":37,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["name",{"_index":150,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["nestjs",{"_index":262,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["nestjs/apollo",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":457,"title":{},"body":{"dependencies.html":{}}}],["nestjs/graphql",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"injectables/GqlAuthGuard.html":{},"classes/UserResolver.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":461,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["new",{"_index":146,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newly",{"_index":385,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser",{"_index":404,"title":{},"body":{"injectables/UserService.html":{}}}],["ngrx/effects",{"_index":463,"title":{},"body":{"dependencies.html":{}}}],["ngrx/entity",{"_index":465,"title":{},"body":{"dependencies.html":{}}}],["ngrx/router",{"_index":466,"title":{},"body":{"dependencies.html":{}}}],["ngrx/store",{"_index":468,"title":{},"body":{"dependencies.html":{}}}],["non",{"_index":557,"title":{},"body":{"license.html":{}}}],["notice",{"_index":543,"title":{},"body":{"license.html":{}}}],["null",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":299,"title":{},"body":{"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["number(process.env.db_port",{"_index":598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(process.env.jwt_expires_in",{"_index":592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nx",{"_index":503,"title":{},"body":{"index.html":{}}}],["nx/angular",{"_index":469,"title":{},"body":{"dependencies.html":{}}}],["nx/shared/data",{"_index":177,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"entities/UserEntity.html":{}}}],["object",{"_index":251,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["objects",{"_index":389,"title":{},"body":{"injectables/UserService.html":{}}}],["obtaining",{"_index":517,"title":{},"body":{"license.html":{}}}],["omitted",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["operations",{"_index":148,"title":{},"body":{"classes/AuthResolver.html":{}}}],["optional",{"_index":151,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["otherwise",{"_index":570,"title":{},"body":{"license.html":{}}}],["out",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"modules/UsersModule.html":{},"license.html":{},"overview.html":{}}}],["overrides",{"_index":246,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["overview",{"_index":576,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":437,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":182,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["parameters",{"_index":149,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["parse",{"_index":622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parsed",{"_index":623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseliteral(ast",{"_index":630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parses",{"_index":621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parsevalue(value",{"_index":624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partial",{"_index":381,"title":{},"body":{"injectables/UserService.html":{}}}],["particular",{"_index":555,"title":{},"body":{"license.html":{}}}],["pass",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":263,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":276,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":265,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":162,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["password.service",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordhash",{"_index":293,"title":{},"body":{"injectables/PasswordService.html":{}}}],["passwordservice",{"_index":102,"title":{"injectables/PasswordService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"coverage.html":{},"overview.html":{}}}],["paths",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["payload",{"_index":165,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":283,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":284,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["permission",{"_index":511,"title":{},"body":{"license.html":{}}}],["permit",{"_index":536,"title":{},"body":{"license.html":{}}}],["person",{"_index":516,"title":{},"body":{"license.html":{}}}],["persons",{"_index":537,"title":{},"body":{"license.html":{}}}],["pg",{"_index":484,"title":{},"body":{"dependencies.html":{}}}],["plain",{"_index":295,"title":{},"body":{"injectables/PasswordService.html":{}}}],["playground",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["popperjs/core",{"_index":471,"title":{},"body":{"dependencies.html":{}}}],["port",{"_index":597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["portions",{"_index":547,"title":{},"body":{"license.html":{}}}],["postgres",{"_index":594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["postgresql",{"_index":505,"title":{},"body":{"index.html":{}}}],["primary",{"_index":328,"title":{},"body":{"entities/UserEntity.html":{}}}],["primarygeneratedcolumn",{"_index":324,"title":{},"body":{"entities/UserEntity.html":{}}}],["private",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{}}}],["privatekey",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{}}}],["process.env.db_host",{"_index":596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_type",{"_index":593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_user_name",{"_index":599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_user_password",{"_index":600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.jwt_secret",{"_index":591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise",{"_index":167,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":288,"title":{"properties.html":{}},"body":{"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"properties.html":{}}}],["provide",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{},"injectables/PasswordService.html":{},"modules/UsersModule.html":{}}}],["provided",{"_index":356,"title":{},"body":{"classes/UserResolver.html":{},"license.html":{}}}],["providers",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["publish",{"_index":530,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":556,"title":{},"body":{"license.html":{}}}],["queries",{"_index":138,"title":{},"body":{"classes/AuthResolver.html":{}}}],["query",{"_index":161,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["query('login",{"_index":155,"title":{},"body":{"classes/AuthResolver.html":{}}}],["query('logout",{"_index":170,"title":{},"body":{"classes/AuthResolver.html":{}}}],["query('user",{"_index":366,"title":{},"body":{"classes/UserResolver.html":{}}}],["query('user')@useguards(gqlauthguard",{"_index":350,"title":{},"body":{"classes/UserResolver.html":{}}}],["readonly",{"_index":184,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["reflect",{"_index":486,"title":{},"body":{"dependencies.html":{}}}],["related",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["repository",{"_index":377,"title":{},"body":{"injectables/UserService.html":{}}}],["representing",{"_index":312,"title":{},"body":{"entities/UserEntity.html":{}}}],["req",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["request",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"injectables/GqlAuthGuard.html":{}}}],["requests",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["requires",{"_index":355,"title":{},"body":{"classes/UserResolver.html":{}}}],["reset",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolver",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"classes/UserResolver.html":{},"miscellaneous/variables.html":{}}}],["resolver('auth",{"_index":181,"title":{},"body":{"classes/AuthResolver.html":{}}}],["resolver('user",{"_index":365,"title":{},"body":{"classes/UserResolver.html":{}}}],["resolvermap",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["resolvers",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["resolvers/auth.resolver",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{}}}],["resolvers/user.resolver",{"_index":413,"title":{},"body":{"modules/UsersModule.html":{}}}],["resolving",{"_index":168,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["response",{"_index":169,"title":{},"body":{"classes/AuthResolver.html":{}}}],["responsible",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["restriction",{"_index":524,"title":{},"body":{"license.html":{}}}],["results",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":352,"title":{},"body":{"classes/UserResolver.html":{}}}],["retrieves",{"_index":387,"title":{},"body":{"injectables/UserService.html":{}}}],["return",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["rights",{"_index":527,"title":{},"body":{"license.html":{}}}],["root",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["rounds",{"_index":304,"title":{},"body":{"injectables/PasswordService.html":{}}}],["rxjs",{"_index":489,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":303,"title":{},"body":{"injectables/PasswordService.html":{}}}],["saltrounds",{"_index":289,"title":{},"body":{"injectables/PasswordService.html":{}}}],["scalar",{"_index":610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["search",{"_index":393,"title":{},"body":{"injectables/UserService.html":{}}}],["second",{"_index":646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secret",{"_index":126,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":282,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["see",{"_index":305,"title":{},"body":{"injectables/PasswordService.html":{}}}],["sell",{"_index":534,"title":{},"body":{"license.html":{}}}],["send",{"_index":619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serialize",{"_index":615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serialize(value",{"_index":617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serialized",{"_index":616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serializes",{"_index":611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server",{"_index":450,"title":{},"body":{"dependencies.html":{}}}],["service",{"_index":152,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["services",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{}}}],["services/auth.service",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{}}}],["services/jwt.strategy",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{}}}],["services/password.service",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{}}}],["services/user.service",{"_index":362,"title":{},"body":{"classes/UserResolver.html":{},"modules/UsersModule.html":{}}}],["set",{"_index":125,"title":{},"body":{"modules/AuthModule.html":{}}}],["sets",{"_index":267,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["settings",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["shall",{"_index":544,"title":{},"body":{"license.html":{}}}],["sign",{"_index":164,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["signin",{"_index":179,"title":{},"body":{"classes/AuthResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signinpayload",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinpayload.password",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{}}}],["software",{"_index":519,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["specify",{"_index":414,"title":{},"body":{"modules/UsersModule.html":{}}}],["started",{"_index":501,"title":{"index.html":{},"license.html":{}},"body":{}}],["starting",{"_index":499,"title":{},"body":{"miscellaneous/functions.html":{}}}],["statements",{"_index":421,"title":{},"body":{"coverage.html":{}}}],["store",{"_index":467,"title":{},"body":{"dependencies.html":{}}}],["strategy",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["string",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":539,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":532,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":546,"title":{},"body":{"license.html":{}}}],["success",{"_index":174,"title":{},"body":{"classes/AuthResolver.html":{}}}],["super",{"_index":278,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":573,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":574,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":436,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":435,"title":{},"body":{"coverage.html":{}}}],["technologies",{"_index":502,"title":{},"body":{"index.html":{}}}],["this.authservice.login(authsigninpayload",{"_index":190,"title":{},"body":{"classes/AuthResolver.html":{}}}],["this.jwtservice.sign(payload",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordservice.comparehash(pass",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.saltrounds",{"_index":308,"title":{},"body":{"injectables/PasswordService.html":{}}}],["this.userrepository.find",{"_index":399,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find({where",{"_index":400,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone({where",{"_index":407,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":406,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(user",{"_index":405,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.findonebyid(user.id",{"_index":369,"title":{},"body":{"classes/UserResolver.html":{}}}],["this.userservice.findonebyusername(username",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validateuser(signinpayload.username",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["throws",{"_index":185,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["time",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{}}}],["timestamp",{"_index":320,"title":{},"body":{"entities/UserEntity.html":{}}}],["timestamptz",{"_index":317,"title":{},"body":{"entities/UserEntity.html":{}}}],["token",{"_index":131,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["tokens",{"_index":261,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["tools",{"_index":479,"title":{},"body":{"dependencies.html":{}}}],["tort",{"_index":569,"title":{},"body":{"license.html":{}}}],["true",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":491,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":416,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forroot",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["typepaths",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":186,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["unique",{"_index":336,"title":{},"body":{"entities/UserEntity.html":{}}}],["unknown",{"_index":274,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["up",{"_index":268,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["updated",{"_index":315,"title":{},"body":{"entities/UserEntity.html":{}}}],["updatedatecolumn",{"_index":339,"title":{},"body":{"entities/UserEntity.html":{}}}],["updatedatecolumn({type",{"_index":331,"title":{},"body":{"entities/UserEntity.html":{}}}],["use",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"license.html":{}}}],["used",{"_index":160,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["useguards",{"_index":363,"title":{},"body":{"classes/UserResolver.html":{}}}],["useguards(gqlauthguard",{"_index":367,"title":{},"body":{"classes/UserResolver.html":{}}}],["user",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserEntity.html":{}}}],["user.id",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.username",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["userentity",{"_index":69,"title":{"entities/UserEntity.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"entities/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userid",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["username",{"_index":166,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":379,"title":{},"body":{"injectables/UserService.html":{}}}],["userresolver",{"_index":344,"title":{"classes/UserResolver.html":{}},"body":{"classes/UserResolver.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["users",{"_index":342,"title":{},"body":{"entities/UserEntity.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["users.length",{"_index":401,"title":{},"body":{"injectables/UserService.html":{}}}],["users/entities/user.entity",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["users/services/user.service",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["users/users.module",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users[0",{"_index":403,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":198,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":47,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["using",{"_index":258,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/UserResolver.html":{}}}],["validate",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":270,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validated",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["validates",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["value",{"_index":300,"title":{},"body":{"injectables/PasswordService.html":{},"miscellaneous/variables.html":{}}}],["value.toisostring",{"_index":618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":423,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":582,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":580,"title":{},"body":{"properties.html":{}}}],["warranties",{"_index":552,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":548,"title":{},"body":{"license.html":{}}}],["web",{"_index":260,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["welcome",{"_index":24,"title":{},"body":{"controllers/AppController.html":{}}}],["whether",{"_index":566,"title":{},"body":{"license.html":{}}}],["whoami",{"_index":346,"title":{},"body":{"classes/UserResolver.html":{}}}],["whoami(@currentuser",{"_index":368,"title":{},"body":{"classes/UserResolver.html":{}}}],["whoami(user",{"_index":349,"title":{},"body":{"classes/UserResolver.html":{}}}],["within",{"_index":417,"title":{},"body":{"modules/UsersModule.html":{}}}],["without",{"_index":523,"title":{},"body":{"license.html":{}}}],["zone.js",{"_index":494,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend-api/src/app/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Controller for handling root API requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getData\n                        \n                    \n                \n            \n            \n                \n                        \n                    getData()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in apps/backend-api/src/app/app.controller.ts:15\n                        \n                    \n\n\n            \n                \n                        GET request handler for the root endpoint.\nReturns a welcome message.\n\n\n                        \n                            Returns :     { message: string; }\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common'\n\n\n/**\n * Controller for handling root API requests.\n */\n@Controller()\nexport class AppController {\n\n\t/**\n\t * GET request handler for the root endpoint.\n\t * Returns a welcome message.\n\t */\n\t@Get()\n\tgetData() {\n\t\treturn {message: 'Welcome to backend-api'}\n\t}\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend-api/src/app/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The main module for the backend API.\n\n        \n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { TypeOrmModule, TypeOrmModuleOptions } from '@nestjs/typeorm'\nimport { GraphQLModule } from '@nestjs/graphql'\nimport { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo'\n\nimport { AppController } from './app.controller'\nimport { environment } from '../../environments/environment'\nimport { resolverMap } from './app.resolver'\nimport { UsersModule } from './users/users.module'\nimport { AuthModule } from './auth/auth.module'\nimport { UserEntity } from './users/entities/user.entity'\n\n/**\n * The main module for the backend API.\n */\n@Module({\n\timports: [\n\t\t/**\n\t\t * Configures the TypeORM module with the database connection settings and\n\t\t * the UserEntity.\n\t\t */\n\t\tTypeOrmModule.forRoot({\n\t\t\t...environment.connection,\n\t\t\tentities: [UserEntity]\n\t\t} as TypeOrmModuleOptions),\n\t\t/**\n\t\t * Configures the GraphQL module with the ApolloDriver, type paths, context\n\t\t * resolver, and resolvers.\n\t\t */\n\t\tGraphQLModule.forRoot({\n\t\t\tdriver: ApolloDriver,\n\t\t\ttypePaths: ['./**/*.graphql'],\n\t\t\tcontext: ({req}) => ({req}),\n\t\t\tplayground: true,\n\t\t\tresolvers: [resolverMap]\n\t\t}),\n\t\t/**\n\t\t * Imports the UsersModule for handling user-related functionality.\n\t\t */\n\t\tUsersModule,\n\t\t/**\n\t\t * Imports the AuthModule for handling authentication-related functionality.\n\t\t */\n\t\tAuthModule\n\t],\n\t/**\n\t * Exports the AppController for use in other modules.\n\t */\n\tcontrollers: [AppController]\n})\nexport class AppModule {\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend-api/src/app/auth/auth.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Authentication module containing logic for user authentication.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            PasswordService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { PassportModule } from '@nestjs/passport'\nimport { JwtModule } from '@nestjs/jwt'\n\nimport { environment } from '../../../environments/environment'\nimport { AuthService } from './services/auth.service'\nimport { PasswordService } from './services/password.service'\nimport { JwtStrategy } from './services/jwt.strategy'\nimport { AuthResolver } from './resolvers/auth.resolver'\nimport { UsersModule } from '../users/users.module'\n\n/**\n * Authentication module containing logic for user authentication.\n */\n@Module({\n\timports: [\n\t\tUsersModule, // Import the UsersModule to access user-related functionality.\n\t\tPassportModule.register({\n\t\t\tdefaultStrategy: 'jwt' // Configure the default authentication strategy.\n\t\t}),\n\t\tJwtModule.register({\n\t\t\tprivateKey: environment.jwt.secret, // Set the JWT secret key.\n\t\t\tsignOptions: {\n\t\t\t\texpiresIn: environment.jwt.expiresIn // Set the token expiration time.\n\t\t\t}\n\t\t})\n\t],\n\tproviders: [AuthService, PasswordService, JwtStrategy, AuthResolver], // Provide\n                                                                        // services\n                                                                        // and\n                                                                        // resolvers.\n\texports: [AuthService, PassportModule] // Export AuthService and\n\t// PassportModule for use in other\n\t// modules.\n})\nexport class AuthModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthResolver.html":{"url":"classes/AuthResolver.html","title":"class - AuthResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend-api/src/app/auth/resolvers/auth.resolver.ts\n        \n\n\n            \n                Description\n            \n            \n                Resolver for authentication-related GraphQL queries.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    Async\n                                logout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend-api/src/app/auth/resolvers/auth.resolver.ts:13\n                            \n                        \n\n                \n                    \n                            Constructs a new AuthResolver instance.\n  authentication-related operations.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe authentication service to use for\nauthentication-related operations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(authSignInPayload: ISignAuthPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('login')\n                \n            \n\n                    \n                        \n                            Defined in apps/backend-api/src/app/auth/resolvers/auth.resolver.ts:31\n                        \n                    \n\n\n            \n                \n                        Logs in a user and generates an access token.\nThis resolver method is used by the login GraphQL query.\n  password.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                authSignInPayload\n                                            \n                                                        ISignAuthPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe sign-in payload containing username and\npassword.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise resolving to the sign-in response.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('logout')\n                \n            \n\n                    \n                        \n                            Defined in apps/backend-api/src/app/auth/resolvers/auth.resolver.ts:41\n                        \n                    \n\n\n            \n                \n                        Logs out a user.\nThis resolver method is used by the logout GraphQL query.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise resolving to a boolean indicating success.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query, Resolver } from '@nestjs/graphql'\nimport {\n\tISignAuthPayload,\n\tISignAuthResponse\n} from '@angular-nx/shared/data-access/interfaces'\nimport { SignIn } from '../decorators/auth.decorator'\nimport { AuthService } from '../services/auth.service'\n\n/**\n * Resolver for authentication-related GraphQL queries.\n */\n@Resolver('Auth')\nexport class AuthResolver {\n\t/**\n\t * Constructs a new `AuthResolver` instance.\n\t * @param authService - The authentication service to use for\n\t *   authentication-related operations.\n\t */\n\tconstructor(private readonly authService: AuthService) {\n\t}\n\n\t/**\n\t * Logs in a user and generates an access token.\n\t * This resolver method is used by the `login` GraphQL query.\n\t * @param authSignInPayload - The sign-in payload containing username and\n\t *   password.\n\t * @returns A promise resolving to the sign-in response.\n\t * @throws UnauthorizedException if authentication fails.\n\t */\n\t@Query('login')\n\tasync login(@SignIn() authSignInPayload: ISignAuthPayload): Promise {\n\t\treturn await this.authService.login(authSignInPayload)\n\t}\n\n\t/**\n\t * Logs out a user.\n\t * This resolver method is used by the `logout` GraphQL query.\n\t * @returns A promise resolving to a boolean indicating success.\n\t */\n\t@Query('logout')\n\tasync logout(): Promise {\n\t\treturn true\n\t}\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend-api/src/app/auth/services/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for authentication-related functionality.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(passwordService: PasswordService, jwtService: JwtService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend-api/src/app/auth/services/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                             Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(signInPayload: ISignAuthPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/backend-api/src/app/auth/services/auth.service.ts:55\n                        \n                    \n\n\n            \n                \n                        Logs in a user and generates an access token.\n  password.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signInPayload\n                                            \n                                                        ISignAuthPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe sign-in payload containing username and\npassword.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise Data for sign-in in application\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(username: string, pass: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/backend-api/src/app/auth/services/auth.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Validates a user's credentials.\n  or null if validation fails.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe username to validate.\n\n\n                                            \n                                        \n                                        \n                                                pass\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe password to validate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A promise resolving to the validated user (with password omitted)\nor null if validation fails.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common'\nimport {\n\tISignAuthPayload,\n\tISignAuthResponse\n} from '@angular-nx/shared/data-access/interfaces'\nimport { UserService } from '../../users/services/user.service'\nimport { JwtService } from '@nestjs/jwt'\nimport { PasswordService } from './password.service'\nimport { UserEntity } from '../../users/entities/user.entity'\nimport { environment } from '../../../../environments/environment'\n\n/**\n * Service responsible for authentication-related functionality.\n */\n@Injectable()\nexport class AuthService {\n\t/**\n\t *  Constructor\n\t * @param passwordService\n\t * @param jwtService\n\t * @param userService\n\t */\n\tconstructor(\n\t\tprivate readonly passwordService: PasswordService,\n\t\tprivate readonly jwtService: JwtService,\n\t\tprivate readonly userService: UserService\n\t) {\n\t}\n\n\t/**\n\t * Validates a user's credentials.\n\t * @param username - The username to validate.\n\t * @param pass - The password to validate.\n\t * @returns A promise resolving to the validated user (with password omitted)\n\t *   or null if validation fails.\n\t */\n\tasync validateUser(username: string, pass: string): Promise> {\n\t\tconst user = await this.userService.findOneByUserName(username)\n\n\t\tconst isValid = user ? await this.passwordService.compareHash(pass, user.password) : false\n\t\tif (isValid) {\n\t\t\tdelete user.password\n\t\t}\n\n\t\treturn user ?? null\n\t}\n\n\t/**\n\t * Logs in a user and generates an access token.\n\t * @param signInPayload - The sign-in payload containing username and\n\t *   password.\n\t * @returns Promise Data for sign-in in application\n\t * @throws UnauthorizedException if authentication fails.\n\t */\n\tasync login(signInPayload: ISignAuthPayload): Promise {\n\t\tconst user = await this.validateUser(signInPayload.username, signInPayload.password)\n\t\tif (!user) {\n\t\t\tthrow new UnauthorizedException()\n\t\t}\n\t\tconst payload = {username: user.username, userid: user.id}\n\n\t\treturn {\n\t\t\taccessToken: this.jwtService.sign(payload),\n\t\t\texpiresIn: new Date(environment.jwt.expiresIn).getDate(),\n\t\t\tid: user.id\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GqlAuthGuard.html":{"url":"injectables/GqlAuthGuard.html","title":"injectable - GqlAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GqlAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend-api/src/app/users/guards/gql.auth-guard.ts\n        \n\n\n            \n                Description\n            \n            \n                The GraphQL authentication guard.\n\n            \n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRequest\n                        \n                    \n                \n            \n            \n                \ngetRequest(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/backend-api/src/app/users/guards/gql.auth-guard.ts:15\n                        \n                    \n\n\n            \n                \n                        Overrides the base method to extract the request from the GraphQL context.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe execution context.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The HTTP request object.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\nimport { GqlExecutionContext } from '@nestjs/graphql'\n\n/**\n * The GraphQL authentication guard.\n */\n@Injectable()\nexport class GqlAuthGuard extends AuthGuard('jwt') {\n\t/**\n\t * Overrides the base method to extract the request from the GraphQL context.\n\t * @param context - The execution context.\n\t * @returns The HTTP request object.\n\t */\n\tgetRequest(context: ExecutionContext) {\n\t\tconst ctx = GqlExecutionContext.create(context)\n\t\treturn ctx.getContext().req\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend-api/src/app/auth/services/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                JWT strategy for authentication using JSON Web Tokens.\nThis strategy is used by NestJS Passport module to handle JWT authentication.\n\n            \n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in apps/backend-api/src/app/auth/services/jwt.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            Constructs a new JwtStrategy instance.\nThis constructor sets up the strategy configuration.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/backend-api/src/app/auth/services/jwt.strategy.ts:31\n                        \n                    \n\n\n            \n                \n                        Validates the JWT payload and returns the user information.\nThis method is called by NestJS Passport module to validate the JWT.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe JWT payload.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The user information extracted from the payload.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { PassportStrategy } from '@nestjs/passport'\nimport { ExtractJwt, Strategy } from 'passport-jwt'\nimport { environment } from '../../../../environments/environment'\n\n\n/**\n * JWT strategy for authentication using JSON Web Tokens.\n * This strategy is used by NestJS Passport module to handle JWT authentication.\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n\t/**\n\t * Constructs a new JwtStrategy instance.\n\t * This constructor sets up the strategy configuration.\n\t */\n\tconstructor() {\n\t\tsuper({\n\t\t\tjwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n\t\t\tignoreExpiration: false,\n\t\t\tsecretOrKey: environment.jwt.secret\n\t\t})\n\t}\n\n\t/**\n\t * Validates the JWT payload and returns the user information.\n\t * This method is called by NestJS Passport module to validate the JWT.\n\t * @param payload - The JWT payload.\n\t * @returns The user information extracted from the payload.\n\t */\n\tasync validate(payload: any) {\n\t\treturn {userId: payload.sub, username: payload.username}\n\t}\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PasswordService.html":{"url":"injectables/PasswordService.html","title":"injectable - PasswordService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PasswordService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend-api/src/app/auth/services/password.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Provide methods bcrypt and compare password\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                saltRounds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                compareHash\n                            \n                            \n                                getHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        compareHash\n                        \n                    \n                \n            \n            \n                \ncompareHash(password: string, passwordHash: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/backend-api/src/app/auth/services/password.service.ts:30\n                        \n                    \n\n\n            \n                \n                        Compare plain password with password hash\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Plain password\n\n                                            \n                                        \n                                        \n                                                passwordHash\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Password hash\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Boolean=\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHash\n                        \n                    \n                \n            \n            \n                \ngetHash(password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/backend-api/src/app/auth/services/password.service.ts:20\n                        \n                    \n\n\n            \n                \n                        Return hash\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Plain password\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Password hash\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        saltRounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                    \n                        \n                                Defined in apps/backend-api/src/app/auth/services/password.service.ts:13\n                        \n                    \n\n            \n                \n                    Salt rounds\nSee https://github.com/kelektiv/node.bcrypt.js#readme\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { compare, hash } from 'bcrypt'\n\n/**\n * Provide methods bcrypt and compare password\n */\n@Injectable()\nexport class PasswordService {\n\t/**\n\t * Salt rounds\n\t * @see https://github.com/kelektiv/node.bcrypt.js#readme\n\t */\n\tprivate saltRounds = 10\n\n\t/**\n\t * Return hash\n\t * @param password Plain password\n\t * @returns Password hash\n\t */\n\tgetHash(password: string): Promise {\n\t\treturn hash(password, this.saltRounds)\n\t}\n\n\t/**\n\t * Compare plain password with password hash\n\t * @param password Plain password\n\t * @param passwordHash Password hash\n\t * @returns Boolean=\n\t */\n\tcompareHash(password: string, passwordHash: string): Promise {\n\t\treturn compare(password, passwordHash)\n\t}\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserEntity.html":{"url":"entities/UserEntity.html","title":"entity - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend-api/src/app/users/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a user.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                created\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                updated\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend-api/src/app/users/entities/user.entity.ts:31\n                        \n                    \n\n            \n                \n                    Timestamp when the user was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend-api/src/app/users/entities/user.entity.ts:43\n                        \n                    \n\n            \n                \n                    User's email address.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend-api/src/app/users/entities/user.entity.ts:19\n                        \n                    \n\n            \n                \n                    Auto-generated primary key for the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend-api/src/app/users/entities/user.entity.ts:49\n                        \n                    \n\n            \n                \n                    User's hashed password.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend-api/src/app/users/entities/user.entity.ts:37\n                        \n                    \n\n            \n                \n                    Timestamp when the user was last updated.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 50, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend-api/src/app/users/entities/user.entity.ts:25\n                        \n                    \n\n            \n                \n                    Unique username for the user.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n\tColumn,\n\tCreateDateColumn,\n\tEntity,\n\tPrimaryGeneratedColumn,\n\tUpdateDateColumn\n} from 'typeorm'\nimport { IUser } from '@angular-nx/shared/data-access/interfaces'\n\n/**\n * Entity representing a user.\n */\n@Entity({name: 'users'})\nexport class UserEntity implements IUser {\n\t/**\n\t * Auto-generated primary key for the user.\n\t */\n\t@PrimaryGeneratedColumn()\n\tid: number\n\n\t/**\n\t * Unique username for the user.\n\t */\n\t@Column({length: 50, unique: true})\n\tusername: string\n\n\t/**\n\t * Timestamp when the user was created.\n\t */\n\t@CreateDateColumn({type: 'timestamptz', default: () => 'CURRENT_TIMESTAMP'})\n\tcreated: string\n\n\t/**\n\t * Timestamp when the user was last updated.\n\t */\n\t@UpdateDateColumn({type: 'timestamptz', default: () => 'CURRENT_TIMESTAMP'})\n\tupdated: string\n\n\t/**\n\t * User's email address.\n\t */\n\t@Column()\n\temail: string\n\n\t/**\n\t * User's hashed password.\n\t */\n\t@Column()\n\tpassword: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResolver.html":{"url":"classes/UserResolver.html","title":"class - UserResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend-api/src/app/users/resolvers/user.resolver.ts\n        \n\n\n            \n                Description\n            \n            \n                Resolver for the User entity.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                whoAmI\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend-api/src/app/users/resolvers/user.resolver.ts:12\n                            \n                        \n\n                \n                    \n                             constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        whoAmI\n                        \n                    \n                \n            \n            \n                \n                        \n                    whoAmI(user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('user')@UseGuards(GqlAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in apps/backend-api/src/app/users/resolvers/user.resolver.ts:28\n                        \n                    \n\n\n            \n                \n                        GraphQL query to retrieve information about the currently authenticated\nuser. Requires authentication using the GqlAuthGuard.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UserEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe authenticated user (provided by the decorator).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The UserEntity corresponding to the authenticated user.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query, Resolver } from '@nestjs/graphql'\nimport { CurrentUser } from '../decorators/user.decorator'\nimport { UserEntity } from '../entities/user.entity'\nimport { UserService } from '../services/user.service'\nimport { UseGuards } from '@nestjs/common'\nimport { GqlAuthGuard } from '../guards/gql.auth-guard'\n\n/**\n * Resolver for the User entity.\n */\n@Resolver('User')\nexport class UserResolver {\n\t/**\n\t *  constructor\n\t * @param userService\n\t */\n\tconstructor(private readonly userService: UserService) {\n\t}\n\n\t/**\n\t * GraphQL query to retrieve information about the currently authenticated\n\t * user. Requires authentication using the GqlAuthGuard.\n\t * @param user - The authenticated user (provided by the decorator).\n\t * @returns The UserEntity corresponding to the authenticated user.\n\t */\n\t@Query('user')\n\t@UseGuards(GqlAuthGuard)\n\tasync whoAmI(@CurrentUser() user: UserEntity): Promise {\n\t\treturn await this.userService.findOneById(user.id)\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend-api/src/app/users/services/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByUserName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/backend-api/src/app/users/services/user.service.ts:10\n                            \n                        \n\n                \n                    \n                              constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(user: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/backend-api/src/app/users/services/user.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Creates a new user in the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user data to create.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The newly created UserEntity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                        \n                    find()\n                \n            \n\n\n                    \n                        \n                            Defined in apps/backend-api/src/app/users/services/user.service.ts:25\n                        \n                    \n\n\n            \n                \n                        Retrieves all users from the database.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                An array of UserEntity objects.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/backend-api/src/app/users/services/user.service.ts:54\n                        \n                    \n\n\n            \n                \n                        Finds a user by their ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user ID to search for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The UserEntity if found, or null if not.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneByUserName\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByUserName(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/backend-api/src/app/users/services/user.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Finds a user by their username.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe username to search for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The UserEntity if found, or null if not.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\nimport { UserEntity } from '../entities/user.entity'\n\n/**\n * Service for managing users.\n */\n@Injectable()\nexport class UserService {\n\t/**\n\t *   constructor\n\t * @param userRepository\n\t */\n\tconstructor(\n\t\t@InjectRepository(UserEntity)\n\t\tprivate readonly userRepository: Repository\n\t) {\n\t}\n\n\t/**\n\t * Retrieves all users from the database.\n\t * @returns An array of UserEntity objects.\n\t */\n\tasync find(): Promise {\n\t\treturn await this.userRepository.find()\n\t}\n\n\t/**\n\t * Finds a user by their username.\n\t * @param username - The username to search for.\n\t * @returns The UserEntity if found, or null if not.\n\t */\n\tasync findOneByUserName(username: string): Promise {\n\t\tconst users = await this.userRepository.find({where: {username}})\n\t\treturn users.length === 1 ? users[0] : null\n\t}\n\n\t/**\n\t * Creates a new user in the database.\n\t * @param user - The user data to create.\n\t * @returns The newly created UserEntity.\n\t */\n\tasync createUser(user: Partial): Promise {\n\t\tconst newUser = await this.userRepository.save(user)\n\t\treturn this.userRepository.save(newUser)\n\t}\n\n\t/**\n\t * Finds a user by their ID.\n\t * @param id - The user ID to search for.\n\t * @returns The UserEntity if found, or null if not.\n\t */\n\tasync findOneById(id: number): Promise {\n\t\treturn await this.userRepository.findOne({where: {id}}) || null\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend-api/src/app/users/users.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Users module contain logic of users\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { TypeOrmModule } from '@nestjs/typeorm'\n\nimport { UserEntity } from './entities/user.entity'\nimport { UserResolver } from './resolvers/user.resolver'\nimport { UserService } from './services/user.service'\n\n\n/**\n * Users module contain logic of users\n */\n@Module({\n\t// Import the TypeORM module and specify the UserEntity as a feature.\n\timports: [TypeOrmModule.forFeature([UserEntity])],\n\t// Provide the UserResolver and UserService as providers within this module.\n\tproviders: [UserResolver, UserService],\n\t// Export the UserService so that it can be used in other modules.\n\texports: [UserService]\n})\nexport class UsersModule {\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/backend-api/environments/environment.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/backend-api/src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                apps/backend-api/src/app/app.resolver.ts\n            \n            variable\n            resolverMap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/backend-api/src/app/auth/decorators/auth.decorator.ts\n            \n            variable\n            SignIn\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/backend-api/src/app/auth/resolvers/auth.resolver.ts\n            \n            class\n            AuthResolver\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/backend-api/src/app/auth/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/backend-api/src/app/auth/services/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/backend-api/src/app/auth/services/password.service.ts\n            \n            injectable\n            PasswordService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/backend-api/src/app/users/decorators/user.decorator.ts\n            \n            variable\n            CurrentUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/backend-api/src/app/users/entities/user.entity.ts\n            \n            entity\n            UserEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/backend-api/src/app/users/guards/gql.auth-guard.ts\n            \n            injectable\n            GqlAuthGuard\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                apps/backend-api/src/app/users/resolvers/user.resolver.ts\n            \n            class\n            UserResolver\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/backend-api/src/app/users/services/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                apps/backend-api/src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~18.0.0\n        \n            @angular/cdk : ^18.0.5\n        \n            @angular/common : ~18.0.0\n        \n            @angular/compiler : ~18.0.0\n        \n            @angular/core : ~18.0.0\n        \n            @angular/forms : ~18.0.0\n        \n            @angular/material : ^18.0.5\n        \n            @angular/platform-browser : ~18.0.0\n        \n            @angular/platform-browser-dynamic : ~18.0.0\n        \n            @angular/platform-server : ~18.0.0\n        \n            @angular/router : ~18.0.0\n        \n            @angular/ssr : ~18.0.0\n        \n            @apollo/server : ^4.10.4\n        \n            @nestjs/apollo : ^12.1.0\n        \n            @nestjs/common : ^10.0.2\n        \n            @nestjs/core : ^10.0.2\n        \n            @nestjs/graphql : ^12.1.1\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.2\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            @ngrx/effects : ^18.0.1\n        \n            @ngrx/entity : ^18.0.1\n        \n            @ngrx/router-store : ^18.0.1\n        \n            @ngrx/store : ^18.0.1\n        \n            @nx/angular : 19.3.2\n        \n            @popperjs/core : ^2.11.8\n        \n            axios : ^1.6.0\n        \n            bcrypt : ^5.1.1\n        \n            bootstrap : ^5.3.2\n        \n            express : ~4.18.2\n        \n            graphql : ^16.9.0\n        \n            graphql-tools : ^9.0.1\n        \n            graphql-type-json : ^0.3.2\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.12.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            typeorm : ^0.3.20\n        \n            zone.js : ~0.14.3\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/backend-api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        The bootstrap function for starting the NestJS application.\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\nTechnologies Used\n\nNx\nNestJs\nGraphQL\nDocker\nPostgreSQL\n\nDocumentation\n\nBackend-api\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2024\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.1.0\n        \n            License : MIT\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CurrentUser   (apps/.../user.decorator.ts)\n                        \n                        \n                            environment   (apps/.../environment.ts)\n                        \n                        \n                            resolverMap   (apps/.../app.resolver.ts)\n                        \n                        \n                            SignIn   (apps/.../auth.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/backend-api/src/app/users/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n\t(data: unknown, ctx: ExecutionContext) => {\n\t\treturn ctx\n\t}\n)\n                    \n                \n\n            \n                \n                    Custom decorator to extract the current user from the execution context.\n\n                \n            \n\n        \n    \n\n    apps/backend-api/environments/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n\tproduction: false,\n\tjwt: {\n\t\tsecret: process.env.JWT_SECRET,\n\t\texpiresIn: Number(process.env.JWT_EXPIRES_IN)\n\t},\n\tconnection: {\n\t\ttype: process.env.DB_TYPE as 'postgres',\n\t\thost: process.env.DB_HOST,\n\t\tport: Number(process.env.DB_PORT),\n\t\tusername: process.env.DB_USER_NAME,\n\t\tpassword: process.env.DB_USER_PASSWORD,\n\t\tdatabase: process.env.DB_NAME,\n\t\tdropSchema: false,\n\t\tsynchronize: true,\n\t\tlogging: false // log db in console\n\t}\n}\n                    \n                \n\n            \n                \n                    The environment configuration object.\n\n                \n            \n\n        \n    \n\n    apps/backend-api/src/app/app.resolver.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        resolverMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n\tDate: new GraphQLScalarType({\n\t\tname: 'Date',\n\t\tdescription: 'Date custom scalar type',\n\t\t/**\n\t\t * Serializes a `Date` value to a string in ISO 8601 format.\n\t\t * @param {Date} value - The `Date` value to serialize.\n\t\t * @returns {string} - The serialized value.\n\t\t */\n\t\tserialize(value: Date) {\n\t\t\treturn value.toISOString() // Value send to the client\n\t\t},\n\t\t/**\n\t\t * Parses a string value to a `Date` object.\n\t\t * @param {string} value - The string value to parse.\n\t\t * @returns {Date} - The parsed `Date` object.\n\t\t */\n\t\tparseValue(value: string) {\n\t\t\treturn new Date(value) // Value from the client\n\t\t},\n\t\t/**\n\t\t * Parses a GraphQL language literal value to a `Date` object.\n\t\t * @param {any} ast - The GraphQL language literal value to parse.\n\t\t * @returns {Date|null} - The parsed `Date` object, or `null` if the value\n\t\t *   is not a string.\n\t\t */\n\t\tparseLiteral(ast) {\n\t\t\tif (ast.kind === Kind.STRING) {\n\t\t\t\treturn new Date(ast.value) // ast value is always in string format\n\t\t\t}\n\t\t\treturn null\n\t\t}\n\t}),\n\tJSON: GraphQLJSON\n}\n                    \n                \n\n            \n                \n                    The resolver map for custom scalar types.\n\n                \n            \n\n        \n    \n\n    apps/backend-api/src/app/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SignIn\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((data: unknown, ctx: ExecutionContext) => {\n\tconst args = ctx.getArgs()[1]\n\tconsole.log(ctx.getArgs(), 'ctx.getArgs()')\n\treturn {username: args.username, password: args.password}\n})\n                    \n                \n\n            \n                \n                    A custom decorator for sign-in functionality.\nIt extracts the username and password from the second argument of the\nExecutionContext.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
